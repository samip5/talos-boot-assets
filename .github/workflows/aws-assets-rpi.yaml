---
name: Talos Boot Assets Generation for RPi on AWS

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: Container image tag for the release
        required: true
      siderolabs_tag:
        description: Upstream release tag for extensions manifest
        required: true
      build_extensions:
        description: Build extensions
        type: boolean
        default: false
        required: false
      build_talos:
        description: Build talos
        type: boolean
        default: true
        required: false
      build_overlay:
        description: Build overlays
        type: boolean
        default: true
        required: false
      extensions_repo_ref:
        description: Git reference for extensions
        default: ccd85fbc443535d08cacc7fe74c225a38ab3f669
        required: true

concurrency:
  group: ${{ github.actor }}-build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Install crane
        uses: imjasonh/setup-crane@v0.4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set release branch
        id: set-rel
        run: |
          release_branch=release-$(grep -Eo '[0-9]\.[0-9]+' <<< ${{ inputs.release_tag }})
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT

      - name: Setup tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:gha-talos-boot-assets
          version: 1.78.0

      - name: Generate tailscale keys
        id: ts-keys
        run: |
          ts_access_token=$(curl --silent \
             -d "client_id=${{ secrets.TS_OAUTH_CLIENT_ID }}" \
             -d "client_secret=${{ secrets.TS_OAUTH_SECRET }}" \
             "https://api.tailscale.com/api/v2/oauth/token" | jq -r '.access_token')
           if [ "$ts_access_token" = "null" ]; then
             echo "Tailscale API returned null access token"
             curl_output=$(curl --silent \
               -d "client_id=${{ secrets.TS_OAUTH_CLIENT_ID }}" \
               -d "client_secret=${{ secrets.TS_OAUTH_SECRET }}" \
               "https://api.tailscale.com/api/v2/oauth/token")
             curl -s \
               --form-string "token=${{ secrets.PUSHOVER_TOKEN }}" \
               --form-string "user=${{ secrets.PUSHOVER_USER }}" \
               --form-string "message=Failed to generate Tailscale access token. Curl output: $curl_output" \
               https://api.pushover.net/1/messages.json
             exit 1
           fi
           echo "::add-mask::$ts_access_token"
          
           ts_auth_key=$(curl --silent --request POST \
             --url 'https://api.tailscale.com/api/v2/tailnet/-/keys?all=true' \
             --header "Authorization: Bearer $ts_access_token" \
             --header 'Content-Type: application/json' \
             --data '{
             "capabilities": {
               "devices": {
                 "create": {
                   "reusable": true,
                   "ephemeral": true,
                   "preauthorized": true,
                   "tags": ["tag:gha-talos-boot-assets"]
                 }
               }
             },
             "expirySeconds": 300,
             "description": "${{ github.run_id }}"
           }' | jq -r '.key')
           if [ "$ts_auth_key" = "null" ]; then
             echo "Tailscale API returned null auth key"
             curl_output=$(curl --silent --request POST \
               --url 'https://api.tailscale.com/api/v2/tailnet/-/keys?all=true' \
               --header "Authorization: Bearer $ts_access_token" \
               --header 'Content-Type: application/json' \
               --data '{
               "capabilities": {
                 "devices": {
                   "create": {
                     "reusable": true,
                     "ephemeral": true,
                     "preauthorized": true,
                     "tags": ["tag:gha-talos-boot-assets"]
                   }
                 }
               },
               "expirySeconds": 300,
               "description": "${{ github.run_id }}"
             }')
             echo "Curl output: $curl_output"
             curl -s \
               --form-string "token=${{ secrets.PUSHOVER_TOKEN }}" \
               --form-string "user=${{ secrets.PUSHOVER_USER }}" \
               --form-string "message=Failed to generate Tailscale auth key. Curl output: $curl_output" \
               https://api.pushover.net/1/messages.json
             exit 1
           fi
           echo "::add-mask::$ts_auth_key"
           echo "ts_auth_key=$ts_auth_key" >> $GITHUB_OUTPUT

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::277707128529:role/talos-boot-assets-gha-terraform-buildkit
          aws-region: eu-north-1
          role-duration-seconds: 7200


      - name: Checkout workflow
        uses: actions/checkout@v4

      - name: Terraform apply
        id: terraform-apply
        run: |
          terraform init
          terraform apply -auto-approve \
            -var "ts_auth_key=${{ steps.ts-keys.outputs.ts_auth_key }}"
          instance_amd64_id=$(terraform output --raw instance_amd64_id)
          instance_arm64_id=$(terraform output --raw instance_arm64_id)
          attempt=0
          while ! tailscale ip $instance_amd64_id; do
              attempt=$((attempt + 1))
              if [ $attempt -gt 12 ]; then
                  exit 1
              fi
              sleep 5
          done
          attempt=0
          while ! tailscale ip $instance_arm64_id; do
              attempt=$((attempt + 1))
              if [ $attempt -gt 12 ]; then
                  exit 1
              fi
              sleep 5
          done
          echo "instance_amd64_id=$instance_amd64_id" >> $GITHUB_OUTPUT
          echo "instance_arm64_id=$instance_arm64_id" >> $GITHUB_OUTPUT

      - name: Setup buildkit
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          endpoint: tcp://${{ steps.terraform-apply.outputs.instance_amd64_id }}:9999
          platforms: linux/amd64
          append: |
            - endpoint: tcp://${{ steps.terraform-apply.outputs.instance_arm64_id }}:9999
              platforms: linux/arm64
    
      - name: Login ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout extensions
        if: ${{ !failure() && !cancelled() && (inputs.build_extensions || steps.build-pkgs.conclusion == 'success') }}
        uses: actions/checkout@v4
        with:
          path: extensions
          repository: skyssolutions/talos-extensions
          #ref: ${{ steps.set-rel.outputs.release_branch }}-skylab
          ref: ${{ inputs.extensions_repo_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build extensions
        if: ${{ !failure() && !cancelled() && (inputs.build_extensions || steps.build-pkgs.conclusion == 'success') }}
        working-directory: ./extensions
        run: |
          make _out/bldr
          registry="ghcr.io/${{ github.actor }}/siderolabs"
          crane export ghcr.io/siderolabs/extensions:${{ inputs.siderolabs_tag }} | tar x -C internal/extensions/
          for target in util-linux-tools iscsi-tools; do
            make $target \
              PLATFORM="linux/amd64,linux/arm64" \
              PKGS="${{ inputs.release_tag }}" \
              PKGS_PREFIX="$registry" \
              REGISTRY="ghcr.io/${{ github.actor }}" \
              TAG="${{ inputs.release_tag }}" \
              PUSH="true" \
              CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
            tag="$(_out/bldr eval --target $target --build-arg TAG=${{ inputs.release_tag }} '{{.VERSION}}')"
            digest="$(jq -j .\"containerimage.digest\" _out/meta)"
            fq_image="${registry}/${target}:${tag}@${digest}"
            cosign sign --yes --recursive "$fq_image"
            echo "$fq_image" >> internal/extensions/image-digests
            crane export "$fq_image" - | tar x -O --occurrence=1 manifest.yaml | yq -r ". += {\"$fq_image\": {\"author\": .metadata.author, \"description\": .metadata.description}} | del(.metadata, .version)" - >> internal/extensions/descriptions.yaml
          done

      - name: Build extensions manifest
        if: ${{ !failure() && !cancelled() && (inputs.build_extensions || steps.build-pkgs.conclusion == 'success') }}
        working-directory: ./extensions
        run: |
          mkdir -p _out
          tagged_image="ghcr.io/${{ github.actor }}/siderolabs/extensions:${{ inputs.release_tag }}"
          make docker-extensions \
            PLATFORM="linux/amd64,linux/arm64" \
            PKGS="${{ inputs.release_tag }}" \
            PKGS_PREFIX="ghcr.io/${{ github.actor }}/siderolabs" \
            REGISTRY="ghcr.io/${{ github.actor }}" \
            TAG="${{ inputs.release_tag }}" \
            TARGET_ARGS="--tag=${tagged_image} --push=true" \
            CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
          fq_image="$tagged_image@$(jq -j .\"containerimage.digest\" _out/meta)"
          cosign sign --yes --recursive "$fq_image"

      - name: Checkout talos-kernel
        uses: actions/checkout@v4
        with:
          path: talos-kernel
          repository: skyssolutions/talos-kernel
          ref: skylab
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build talos-kernel (for RPi)
        id: build-rpi-kernel
        working-directory: ./talos-kernel
        run: |
          mkdir -p _out
           registry="ghcr.io/${{ github.actor }}/siderolabs"
           for target in kernel-rpi; do
             make $target \
               PLATFORM="linux/arm64" \
               USERNAME="${{ github.actor }}" \
               REGISTRY_AND_USERNAME="$registry" \
               TAG="${{ inputs.release_tag }}" \
               PUSH="true" \
               CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
             fq_image="$registry/$target:${{ inputs.release_tag }}@$(jq -j .\"containerimage.digest\" _out/meta)"
             cosign sign --yes --recursive "$fq_image"
           done

      - name: Checkout overlays repo
        if: ${{ !failure() && !cancelled() && (inputs.build_overlay || steps.build-pkgs.conclusion == 'success') }}
        uses: actions/checkout@v4
        with:
          path: overlays
          repository: skyssolutions/siderolabs-overlays
          ref: skylab
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build overlays
        if: ${{ !failure() && !cancelled() && (inputs.build_overlay || steps.build-pkgs.conclusion == 'success') }}
        working-directory: ./overlays
        run: |
          mkdir -p _out
          registry="ghcr.io/${{ github.actor }}/siderolabs"
          for target in overlays; do
            make $target \
              PLATFORM="linux/arm64" \
              USERNAME="${{ github.actor }}" \
              REGISTRY_AND_USERNAME="$registry" \
              TAG="${{ inputs.release_tag }}" \
              PUSH="true" \
              CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
            fq_image="$registry/$target:${{ inputs.release_tag }}@$(jq -j .\"containerimage.digest\" _out/meta)"
            cosign sign --yes --recursive "$fq_image"
          done

      - name: Checkout talos
        if: ${{ !failure() && !cancelled() && (inputs.build_talos || steps.build-pkgs.conclusion == 'success') }}
        uses: actions/checkout@v4
        with:
          path: talos
          repository: skyssolutions/talos
          ref: release-1.9-skylab
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build talos
        if: ${{ !failure() && !cancelled() && (inputs.build_talos || steps.build-pkgs.conclusion == 'success') }}
        working-directory: ./talos
        run: |
          mkdir -p _out
          registry="ghcr.io/${{ github.actor }}/siderolabs"
          for target in imager installer; do
            make $target \
              PLATFORM="linux/arm64" \
              PKG_KERNEL="$registry/kernel-rpi:${{ inputs.release_tag }}" \
              USERNAME="${{ github.actor }}" \
              REGISTRY_AND_USERNAME="$registry" \
              TAG="${{ inputs.release_tag }}" \
              PUSH="true" \
              CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
            fq_image="$registry/$target:${{ inputs.release_tag }}@$(jq -j .\"containerimage.digest\" _out/meta)"
            cosign sign --yes --recursive "$fq_image"
          done


      - name: Build talosctl
        if: ${{ !failure() && !cancelled() && (inputs.build_talos || steps.build-pkgs.conclusion == 'success') }}
        working-directory: ./talos
        run: |
          mkdir -p _out
          registry="ghcr.io/${{ github.actor }}/siderolabs"
          make talosctl-image \
            PLATFORM="linux/arm64" \
            USERNAME="${{ github.actor }}" \
            REGISTRY_AND_USERNAME="$registry" \
            TAG="${{ inputs.release_tag }}" \
            PUSH="true" \
            CI_ARGS="--metadata-file _out/meta --build-arg=BUILDKIT_MULTI_PLATFORM=1"
          fq_image="$registry/talosctl:${{ inputs.release_tag }}@$(jq -j .\"containerimage.digest\" _out/meta)"
          cosign sign --yes --recursive "$fq_image"

      - name: Terraform destroy
        if: ${{ always() }}
        run: |
          terraform destroy -auto-approve \
            -var "ts_auth_key=${{ steps.ts-keys.outputs.ts_auth_key }}"
